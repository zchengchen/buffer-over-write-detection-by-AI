--- nginx-source/src/http/ngx_http_request.c	2024-10-06 18:56:46.395435500 -0500
+++ nginx-cp/src/nginx/src/http/ngx_http_request.c	2024-10-13 19:10:57.811375175 -0500
@@ -4038,11 +4038,13 @@
 }
 
 
+
 static ngx_int_t
 ngx_http_validate_from(ngx_str_t *from, ngx_pool_t *pool, ngx_uint_t alloc)
 {
     u_char  *f, *u, ch;
     size_t   i;
+    size_t   u_len = 0;  // track length for buffer overflow prevention
 
     enum {
         sw_begin = 0,
@@ -4054,10 +4056,11 @@
 
     f = from->data;
 
+    // Resetting the state machine to the initial state
     state = sw_begin;
 
     if (alloc) {
-        u = ngx_palloc(pool, from->len);
+        u = ngx_palloc(pool, from->len + 1);  // Allocate an additional byte for the null terminator
 
         if (u == NULL) {
             return NGX_ERROR;
@@ -4079,23 +4082,29 @@
             } else {
                 return NGX_DECLINED;
             }
-            *u++ = ch;
             break;
 
         case sw_username_dot:
             if (isalnum(ch) || ch == '-' || ch == '_') {
-                *u++ = ch;
                 state = sw_username;
             } else if (ch == '.') {
                 state = sw_username_dot;
+
+                if (u_len < 2) {
+                  return NGX_DECLINED;  // Ensure there's enough space to safely step back
+                }
+
                 u -= 2;
+                u_len -= 2;
                 for ( ;; ) {
                     if (*u == '.') {
                         u++;
+                        u_len++;
                         break;
                     }
 
                     u--;
+                    u_len--;
                 }
             } else {
                 return NGX_DECLINED;
@@ -4110,7 +4119,6 @@
             } else if (!isalnum(ch) && ch != '-' && ch != '_' && ch != '+') {
                 return NGX_DECLINED;
             }
-            *u++ = ch;
             break;
 
         case sw_domain:
@@ -4119,24 +4127,30 @@
             } else if (!isalnum(ch) && ch != '-') {
                 return NGX_DECLINED;
             }
-            *u++ = ch;
             break;
 
         case sw_tld:
             if (!isalpha(ch)) {
                 return NGX_DECLINED;
             }
-            *u++ = ch;
             break;
 
         default:
+            return NGX_DECLINED;
+        }
 
+        // Update buffer if a successful transition is made
+        *u++ = ch;
+        u_len++;
+
+        // Check to ensure we do not exceed the buffer length
+        if (u_len >= from->len + 1) {
             return NGX_DECLINED;
         }
     }
 
     if (state == sw_tld) {
-        *u = '\0';
+        *u = '\0'; // Properly null-terminate the validated string
 
         if (alloc) {
             from->data = u;
@@ -4147,6 +4161,7 @@
     }
 }
 
+
 static ngx_int_t
 ngx_http_process_from(ngx_http_request_t *r, ngx_table_elt_t *h,
     ngx_uint_t offset)

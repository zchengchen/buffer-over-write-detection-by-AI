--- nginx-source/src/http/ngx_http_request.c	2024-10-06 18:56:46.395435500 -0500
+++ nginx-cp/src/nginx/src/http/ngx_http_request.c	2024-10-07 22:25:56.632527516 -0500
@@ -4038,10 +4038,11 @@
 }
 
 
-static ngx_int_t
+static 
+ngx_int_t
 ngx_http_validate_from(ngx_str_t *from, ngx_pool_t *pool, ngx_uint_t alloc)
 {
-    u_char  *f, *u, ch;
+    u_char  *f, *u, *u_start, ch;
     size_t   i;
 
     enum {
@@ -4053,29 +4054,28 @@
     } state;
 
     f = from->data;
-
     state = sw_begin;
 
     if (alloc) {
-        u = ngx_palloc(pool, from->len);
-
+        u = ngx_palloc(pool, from->len + 1);   // +1 for the terminating null byte
         if (u == NULL) {
             return NGX_ERROR;
         }
+        u_start = u;
     } else {
         u = from->data;
+        u_start = u;
     }
 
     for (i = 0; i < from->len; i++) {
         ch = f[i];
 
         switch (state) {
-
         case sw_begin:
             if (isalnum(ch) || ch == '-' || ch == '_') {
                 state = sw_username;
             } else if (ch == '.') {
-                state = sw_username_dot;
+                return NGX_DECLINED; // Dots can't appear at the beginning
             } else {
                 return NGX_DECLINED;
             }
@@ -4087,16 +4087,7 @@
                 *u++ = ch;
                 state = sw_username;
             } else if (ch == '.') {
-                state = sw_username_dot;
-                u -= 2;
-                for ( ;; ) {
-                    if (*u == '.') {
-                        u++;
-                        break;
-                    }
-
-                    u--;
-                }
+                return NGX_DECLINED; // Consecutive dots not allowed
             } else {
                 return NGX_DECLINED;
             }
@@ -4130,7 +4121,6 @@
             break;
 
         default:
-
             return NGX_DECLINED;
         }
     }
@@ -4139,7 +4129,7 @@
         *u = '\0';
 
         if (alloc) {
-            from->data = u;
+            from->data = u_start;
         }
         return NGX_OK;
     } else {

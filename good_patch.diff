--- nginx-source/src/http/ngx_http_request.c	2024-10-06 18:56:46.395435500 -0500
+++ nginx-cp/src/nginx/src/http/ngx_http_request.c	2024-10-07 18:47:29.171133319 -0500
@@ -4038,10 +4038,11 @@
 }
 
 
-static ngx_int_t
+static 
+ngx_int_t
 ngx_http_validate_from(ngx_str_t *from, ngx_pool_t *pool, ngx_uint_t alloc)
 {
-    u_char  *f, *u, ch;
+    u_char  *f, *u, *start, ch;
     size_t   i;
 
     enum {
@@ -4053,11 +4054,10 @@
     } state;
 
     f = from->data;
-
     state = sw_begin;
 
     if (alloc) {
-        u = ngx_palloc(pool, from->len);
+        u = ngx_palloc(pool, from->len + 1); // Allocate space for the null terminator
 
         if (u == NULL) {
             return NGX_ERROR;
@@ -4066,6 +4066,8 @@
         u = from->data;
     }
 
+    start = u;  // Keep track of the start of the buffer
+
     for (i = 0; i < from->len; i++) {
         ch = f[i];
 
@@ -4074,12 +4076,13 @@
         case sw_begin:
             if (isalnum(ch) || ch == '-' || ch == '_') {
                 state = sw_username;
+                *u++ = ch;
             } else if (ch == '.') {
                 state = sw_username_dot;
+                *u++ = ch;
             } else {
                 return NGX_DECLINED;
             }
-            *u++ = ch;
             break;
 
         case sw_username_dot:
@@ -4087,22 +4090,19 @@
                 *u++ = ch;
                 state = sw_username;
             } else if (ch == '.') {
-                state = sw_username_dot;
-                u -= 2;
-                for ( ;; ) {
-                    if (*u == '.') {
-                        u++;
-                        break;
-                    }
-
+                if (u > start) {  // Ensure there is something before reverting
+                    u -= 1;  // Correct iteration to point to the last valid character
+                    while (u > start && *u != '.') {
                     u--;
                 }
+                }
             } else {
                 return NGX_DECLINED;
             }
             break;
 
         case sw_username:
+            *u++ = ch;
             if (ch == '@') {
                 state = sw_domain;
             } else if (ch == '.') {
@@ -4110,16 +4110,15 @@
             } else if (!isalnum(ch) && ch != '-' && ch != '_' && ch != '+') {
                 return NGX_DECLINED;
             }
-            *u++ = ch;
             break;
 
         case sw_domain:
+            *u++ = ch;
             if (ch == '.') {
                 state = sw_tld;
             } else if (!isalnum(ch) && ch != '-') {
                 return NGX_DECLINED;
             }
-            *u++ = ch;
             break;
 
         case sw_tld:
@@ -4130,7 +4129,6 @@
             break;
 
         default:
-
             return NGX_DECLINED;
         }
     }
@@ -4139,8 +4137,10 @@
         *u = '\0';
 
         if (alloc) {
-            from->data = u;
+            ngx_pnalloc(pool, u - start + 1);  // Ensure memory is null-terminated
+            ngx_memcpy(from->data, start, u - start + 1);  // Copy to the original structure
         }
+        
         return NGX_OK;
     } else {
         return NGX_DECLINED;
